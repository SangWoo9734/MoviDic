[{"C:\\Users\\psu84\\movidic\\movie_react\\src\\index.js":"1","C:\\Users\\psu84\\movidic\\movie_react\\src\\reportWebVitals.js":"2","C:\\Users\\psu84\\movidic\\movie_react\\src\\App.js":"3","C:\\Users\\psu84\\movidic\\movie_react\\src\\main.js":"4","C:\\Users\\psu84\\movidic\\movie_react\\src\\search.js":"5","C:\\Users\\psu84\\movidic\\movie_react\\src\\history.js":"6"},{"size":592,"mtime":1633623222965,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":1226,"mtime":1634290079107,"results":"10","hashOfConfig":"8"},{"size":8604,"mtime":1634493561514,"results":"11","hashOfConfig":"8"},{"size":15960,"mtime":1634400062475,"results":"12","hashOfConfig":"8"},{"size":7884,"mtime":1634587559519,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"bn6edh",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\psu84\\movidic\\movie_react\\src\\index.js",[],["30","31"],"C:\\Users\\psu84\\movidic\\movie_react\\src\\reportWebVitals.js",[],"C:\\Users\\psu84\\movidic\\movie_react\\src\\App.js",["32","33"],"import { Navbar, Container, Nav} from 'react-bootstrap';\nimport React from 'react'\n\nimport { Route } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\nimport whale from './img/whale.png';\n\nimport Boxoffice from './main.js'\nimport Search from './search.js'\nimport History from './history.js'\n\nfunction App() {\n\n\t\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t\t<Container className='text-center'>\n\t\t\t\t\t\t<Navbar.Brand href=\"/\">\n\t\t\t\t\t\t<img src={whale} style={{width: '40px', height : '40px', marginRight : '10px'}} />\n\t\t\t\t\t\t<span>MOVIDIC</span>\n\t\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t\t\t<Nav className=\"me-auto\">\n\t\t\t\t\t\t<Nav.Link href=\"/search\">SEARCH</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"/history\">HISTORY</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"#pricing\">MY</Nav.Link>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Container>\n\t\t\t</Navbar>\n\n\n\t\t\t{/* <CaroselSet /> */}\n\t\t\t{/* <button onClick={() => {\n\t\t\t\taxios.get('local')\n\t\t\t}}></button> */}\n\n\t\t\t<Route exact path='/'>\n\t\t\t\t<Boxoffice />\n\t\t\t</ Route>\n\n\t\t\t<Route exact path='/search'>\n\t\t\t\t<Search />\n\t\t\t</Route>\n\n\t\t\t<Route exact path='/history'>\n\t\t\t\t<History />\n\t\t\t</Route>\n\n\t\t\t<div className='footer'>\n\t\t\t\t<p>CopyRight By Sangwoo</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n\n\nexport default App;\n","C:\\Users\\psu84\\movidic\\movie_react\\src\\main.js",["34","35","36"],"import { Card, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport next from './img/next.png';\r\nimport before from './img/before.png';\r\n\r\n\r\n\r\nfunction Boxoffice() {\r\n\r\n    var [top10, top10_change] = useState([]);\r\n\tvar [page, page_change] = useState(1);\r\n\tvar [slide, slide_change] = useState(0);\r\n\r\n\t// const getHtml = async() => {\r\n\t// \ttry {\r\n\t// \t\treturn await axios.get('https://movie.naver.com/movie/running/current.naver');\r\n\t// \t} catch (err){\r\n\t// \t\tconsole.log(err);\r\n\t// \t}\r\n\t// }\r\n\t\r\n\tuseEffect(() => {\r\n\r\n\t\ttry {\r\n\t\t\taxios.get(\"http://localhost:8080/public/top10\")\r\n\t\t\t.then(response => {\r\n\t\t\t\tvar json = response.data.result;\r\n\t\t\t\ttop10_change(json);\r\n\t\t\t\tconsole.log(json);\r\n\t\t\t})\r\n\r\n\t\t} catch {\r\n\t\t\t// 오류 발생시 실행\r\n\t\t}\r\n\t}, [page]);\r\n\r\n    return (\r\n        <div className=\"container mt-4 main-box\">\r\n            <h4 className=\"text-center\">TODAY BOXOFFICE</h4>\r\n            <div className=\"boxoffice mt-4\" style={{transform : 'translateX(' + {slide} +'%))'}}>\r\n                <div className={ slide === 1 ? \"boxoffice-view translate-50\" : \"boxoffice-view translate50\"} >\r\n                    <div className='boxoffice-cardset'>\r\n                        {\r\n                            top10.slice(0, 5).map((movie, i) => {\r\n                                return (\r\n                                    <Card className=\"boxoffice-card\"key={i}>\r\n                                        <Card.Img variant=\"top\" className=\"boxoffice-img\" src={movie.posterUrl} />\r\n                                        <Card.Text className={'boxoffice-rank card-' + i}>{movie.id}</Card.Text>\r\n                                        <Card.Body className=\"boxoffice-bg\">\r\n                                            <Card.Title >\r\n                                                <div className=\"boxoffice-title\">{movie.title}</div>\r\n                                                <div className=\"boxoffice-subtitle\">{movie.subTitle}</div>\r\n                                            </Card.Title>\r\n                                            \r\n                                            \r\n                                            <Card.Text className='boxoffice-content'> {movie.info[0]}</Card.Text>\r\n                                            <Card.Text className='boxoffice-content'>{movie.info[2]}</Card.Text>\r\n                                            \r\n                                            {(() => {\r\n                                                    switch(movie.info[4]){\r\n                                                        case '전체 관람가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-all'>ALL</Card.Text>\r\n                                                        case '12세 관람가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-12'>12</Card.Text>\r\n                                                        case '15세 관람가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-15'>15</Card.Text>\r\n                                                        case '청소년 관람불가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-19'>19</Card.Text>\r\n                                                        default :\r\n                                                            return null;\r\n                                                    }\r\n                                            })()}\r\n                                            \r\n                                            <Card.Text className='boxoffice-content'>예매율 <span className='boxoffice-rate'><span>{movie.rate}</span> %</span></Card.Text>\r\n                                            <DropdownButton id=\"dropdown-basic-button\" title=\"예매하기\">\r\n                                                <Dropdown.Item href=\"#/action-1\">CGV</Dropdown.Item>\r\n                                                <Dropdown.Item href=\"#/action-2\">LOTTECINEMA</Dropdown.Item>\r\n                                                <Dropdown.Item href=\"#/action-3\">MEGA BOX</Dropdown.Item>\r\n                                            </DropdownButton>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className='boxoffice-cardset'>\r\n                        {\r\n                            top10.slice(5, 10).map((movie, i) => {\r\n                                return (\r\n                                    <Card className=\"boxoffice-card\" \tkey={i}>\r\n                                        <Card.Img variant=\"top\" className=\"boxoffice-img\" src={movie.posterUrl} />\r\n                                        <Card.Text className={'boxoffice-rank card-' + i}>{movie.id}</Card.Text>\r\n                                        <Card.Body className=\"boxoffice-bg\">\r\n                                            <Card.Title className=\"boxoffice-title\">\r\n                                                <div>{movie.title}</div>\r\n                                                <div className=\"boxoffice-subtitle\">{movie.subTitle}</div>\r\n                                            </Card.Title>\r\n                                            \r\n                                            \r\n                                            <Card.Text className='boxoffice-content'> {movie.info[0]}</Card.Text>\r\n                                            <Card.Text className='boxoffice-content'>{movie.info[2]}</Card.Text>\r\n                                            \r\n                                            {(() => {\r\n                                                    switch(movie.info[4]){\r\n                                                        case '전체 관람가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-all'>ALL</Card.Text>\r\n                                                        case '12세 관람가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-12'>12</Card.Text>\r\n                                                        case '15세 관람가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-15'>15</Card.Text>\r\n                                                        case '청소년 관람불가' :\r\n                                                            return <Card.Text className='boxoffice-agebadge age-19'>19</Card.Text>\r\n                                                        default :\r\n                                                            return null;\r\n                                                    }\r\n                                            })()}\r\n                                            \r\n                                            <Card.Text className='boxoffice-content'>예매율 <span className='boxoffice-rate'><span>{movie.rate}</span> %</span></Card.Text>\r\n                                            <DropdownButton id=\"dropdown-basic-button\" title=\"예매하기\">\r\n                                                <Dropdown.Item href=\"#/action-1\">CGV</Dropdown.Item>\r\n                                                <Dropdown.Item href=\"#/action-2\">LOTTECINEMA</Dropdown.Item>\r\n                                                <Dropdown.Item href=\"#/action-3\">MEGA BOX</Dropdown.Item>\r\n                                            </DropdownButton>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='boxoffice-btn'>\r\n                    <button className=\"btn before\" onClick={() => {\r\n                        slide_change(0);\r\n                    }}><img src={before}/></button>\r\n                    <button className=\"btn next\"onClick={() => {\r\n                        slide_change(1);\r\n                    }}><img src={next}/></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Boxoffice;","C:\\Users\\psu84\\movidic\\movie_react\\src\\search.js",["37","38","39","40","41","42","43","44","45","46","47","48"],"import { Form, Button, Row, Col, Accordion, Card, Modal, Pagination } from 'react-bootstrap';\r\nimport React, { useEffect, useState }from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport axios from 'axios';\r\nimport $ from 'jquery';\r\nimport no from './img/noimage.png';\r\n\r\n\r\nimport './Search.css';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction Search() {\r\n    \r\n    \r\n    var [genre, genre_change] = useState({\r\n        '드라마' : 1, '판타지' : 2, '서부': 3, '공포' : 4, '로맨스': 5, '모험':  6, '스릴러': 7, '느와르' : 8,\r\n        '컬트' : 9, '다큐멘터리' : 10, '코미디' : 11, '가족' : 12, '미스터리' : 13, '전쟁' : 14, '애니메이션' : 15,\r\n        '범죄' : 16, '뮤지컬' : 17, 'SF' : 18, '액션' : 19, '무협' : 20, '에로' : 21, '서스펜스' : 22, '서사' : 23, '블랙코미디' : 24,\r\n        '실험' : 25, '영화카툰' : 26, '영화음악' : 27, '영화패러디포스터' : 28\r\n    })\r\n    \r\n    var [searchWord, setSearchWord] = useState('');\r\n    var [startDate, setStartDate] = useState(new Date());\r\n    var [endDate, setEndDate] = useState(new Date());\r\n    var [date_search, setDate_search] = useState(true);\r\n    var [date_selected, setDate_selected] = useState(false);\r\n    var [genre_selected, setGenre_selected] = useState(false);\r\n    var [selectGenre, setSelectGenre] = useState(0);\r\n    var [searchResult, searchResult_change] = useState([])\r\n    var [showResult, showResult_change] = useState(false);\r\n    var [modalState, setModalState] = useState(false);\r\n    var [items, setItems] = useState([]);\r\n    var [quote, setQuote] = useState({});\r\n\r\n    useEffect(() => {\r\n        var quoteNum = Math.floor(Math.random() * 50) + 1;\r\n\r\n        axios.get('/public/quote', {\r\n            params : {\r\n                q : quoteNum,\r\n            }\r\n        }).then( result => {\r\n            setQuote(result.data);\r\n        })\r\n\r\n    }, []);\r\n    \r\n\r\n    const handlerSubmit = (e) => {\r\n        e.preventDefault();\r\n        var setting;\r\n        console.log();\r\n        if (!date_search) {\r\n            setting = {\r\n                query : searchWord,\r\n                genre : selectGenre,\r\n                display : 100,\r\n                yearfrom : startDate.getFullYear(),\r\n                yearto : endDate.getFullYear(),\r\n            }\r\n        }\r\n        else {\r\n            setting = {\r\n                query : searchWord,\r\n                genre : selectGenre,\r\n                display : 100,\r\n            }\r\n        }\r\n        \r\n        axios.get('/public/searchList', {\r\n            params : setting,\r\n        })\r\n        .then(res => {\r\n            var result = res.data;\r\n\r\n            result.sort(function (a, b) {\r\n                if (a.pubDate > b.pubDate) {\r\n                  return -1;\r\n                }\r\n                if (a.pubDate < b.pubDate) {\r\n                  return 1;\r\n                }\r\n                // a must be equal to b\r\n                return 0;\r\n              });\r\n            showResult_change(false); // Component 재랜더링을 위해 검색결과를 없애기\r\n            searchResult_change(result);\r\n            showResult_change(true);\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container mt-4'>\r\n            <div className='top-box mt-5 mb-5'>\r\n                <div className='top-title h1'>SEARCH MOVIE</div>\r\n                <div className=''>\r\n                    <div className=\"quote-content font-italic \">\"{quote.text}\"</div>\r\n                    <div className=\"quote-info font-italic text-right\">- {quote.title} / {quote.year} -</div>\r\n                </div>\r\n            </div>\r\n            <hr />\r\n            <div className='search-box'>\r\n                <Form onSubmit={handlerSubmit}>\r\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"\">\r\n                        <Form.Label column xs={2} style={{borderRight : '1px solid white'}}>제 목</Form.Label>\r\n                        <Col xs={10}>\r\n                            <Form.Control type=\"text\" placeholder=\"Search...\" onChange={ e => {\r\n                                setSearchWord(e.target.value);\r\n                            }}/>\r\n                        </Col>\r\n                    </Form.Group>\r\n                    \r\n                        \r\n                    <Accordion>\r\n                        <Accordion.Item eventKey=\"0\" >\r\n                            <Accordion.Header className='search-detail'>Search Detail</Accordion.Header>\r\n                            <Accordion.Body className='search-detail'>\r\n                                <Form.Group as={Row} className=\"mb-3 genreGroup\" controlId=\"\">\r\n                                    <Form.Label column  xs={2} style={{ borderRight : '1px solid #212529'}}>장 르</Form.Label>\r\n                                    <Col key={'inline-radio'} xs={10} style={{textAlign : 'left'}} >\r\n                                        <Form.Check type={'radio'} inline label={\"전체\"} name=\"group1\" value={'전체'} id={'inline-radio-0'} className=\"genreName\"  onClick={(e) => {\r\n                                            setSelectGenre(0);\r\n                                        }} />\r\n                                        {\r\n                                            Object.keys(genre).map(function(g, i ){\r\n                                                return <Form.Check type={'radio'} inline label={g} name=\"group1\" value={g} id={'inline-radio-' + i} className=\"genreName\" key={i} onClick={(e) => {\r\n                                                    // console.log(genre[e.target.value]);\r\n                                                    setSelectGenre(genre[e.target.value]);\r\n                                                }} />\r\n                                            })\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                                <Form.Group as={Row} className=\"mb-3 genreGroup\" controlId=\"\">\r\n                                    <Form.Label column xs={2} style={{ borderRight : '1px solid #212529'}}>개봉연도</Form.Label>\r\n                                    <Col xs={10} className='mt-2 search-year'>\r\n                                        <div key = 'default-checkbox' className=\"mb-3 w-50\">\r\n                                            <Form.Check\r\n                                                    checked={!date_search}\r\n                                                    type = 'checkbox'\r\n                                                    id = 'default-checkbox'\r\n                                                    label = '날짜로 검색'\r\n                                                    onChange = {() => {\r\n                                                        setDate_search(!date_search);\r\n                                                    }}\r\n                                                />\r\n                                        </div>\r\n                                        <div className=\"datepicker-content\">\r\n                                            <DatePicker \r\n                                                selected={startDate}\r\n                                                onChange={(date) => {\r\n                                                    if (date > endDate){\r\n                                                        alert('잘못된 날짜 설정입니다.');\r\n                                                    } else {\r\n                                                        setStartDate(date)\r\n                                                    }\r\n                                                }}\r\n                                                showYearPicker\r\n                                                dateFormat=\"yyyy\"\r\n                                                className='datepicker'\r\n                                                disabled = {date_search}/>\r\n                                        </div>\r\n                                        <div className=\"datepicker-style datepicker-content\" > 년 ~</div>\r\n                                        <div className=\"datepicker-content\">\r\n                                            <DatePicker \r\n                                                selected={endDate}\r\n                                                onChange={(date) => {\r\n                                                    if (date < startDate){\r\n                                                        alert('잘못된 날짜 설정입니다.');\r\n                                                    } else {\r\n                                                        setEndDate(date);\r\n                                                    }\r\n                                                }}\r\n                                                showYearPicker\r\n                                                dateFormat=\"yyyy\"\r\n                                                className='datepicker'\r\n                                                disabled = {date_search}/>\r\n                                        </div>\r\n                                        <div className=\"datepicker-style datepicker-content\" > 년</div>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            </Accordion.Body>\r\n                        </Accordion.Item>\r\n                    </Accordion>\r\n\r\n                    <Button variant=\"primary\" className=\"mt-3 search-result\" type=\"submit\" >Search</Button>\r\n                </Form>\r\n\r\n            </div>\r\n            \r\n            {\r\n                showResult\r\n                ? <SearchResult word={searchWord} result={searchResult} modalState={modalState} setModalState={setModalState} className=\"pb-5\"/>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SearchResult(props) {\r\n\r\n    var [searchResult, searchResult_change] = useState(props.result);\r\n    var [page, setPage] = useState(1);\r\n    var [pageComp, setPageComp] = useState([]);\r\n    var [modalData, setModalData] = useState({});\r\n    \r\n    useEffect(() => {\r\n        let items = [];\r\n        for (let number = 1; number <= Math.ceil(searchResult.length/20); number++) {\r\n            items.push(\r\n            <Pagination.Item key={number} active={number === page} onClick={() => {\r\n                setPage(number);\r\n                window.scrollTo(0,0);\r\n            }}>\r\n                {number}\r\n            </Pagination.Item>,\r\n            );\r\n        }\r\n        setPageComp(items);\r\n    }, [page])\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='container mt-5'>\r\n            <div>\r\n                <h2 style={{float:'left', margin:'0'}}><span className='h2 text-primary'>\"{props.word}\"</span> 에 대한 검색결과</h2>\r\n                <p style={{float:'right'}}>총 <span className='h3 text-primary'>{searchResult.length}</span> 개</p>\r\n            </div>\r\n            <div style={{clear : 'both'}}></div>\r\n            <hr style={{marginTop : '0'}}/>\r\n\r\n            <div className='row searchResult-list'>\r\n                <Row style={{margin : 'auto'}}>\r\n                    {\r\n                        \r\n                        searchResult.slice((page-1) * 20, (page-1) * 20 + 20).map(function(m, i) {\r\n                            return (\r\n                            <Col className=\"mt-3 mb-2\" xs={6} md={4} lg={3} key={i}>\r\n                                <Movie source={m} setModalData={setModalData} setModalState = {props.setModalState}/>\r\n                            </Col>\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n            </div>\r\n\r\n            {\r\n                props.modalState\r\n                ? <Moviedetail modalState={props.modalState} onHide={() => props.setModalState(false)} modalData={modalData}/>\r\n                : null\r\n            }\r\n\r\n            <Pagination>{pageComp}</Pagination>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Moviedetail(props) {\r\n    \r\n    var [posterUrl, setPosterUrl] = useState('');\r\n\r\n    useEffect(() => {\r\n        axios.get('/public/poster',{\r\n            params : {\r\n                code : props.modalData.link.split(\"=\")[1],\r\n            }\r\n        })\r\n        .then(res => {\r\n            setPosterUrl(res.data);\r\n        })\r\n    }, [props.modalData])\r\n\r\n    return (\r\n        <Modal\r\n            show = {props.modalState}\r\n            onHide = {props.onHide}\r\n            size='lg'\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            className = \"modal-box\"\r\n            >\r\n            <Modal.Header closeButton />\r\n            <Modal.Body>\r\n                <Row className='modal-info'>\r\n                    <Col xs={3} className=\"modal-img\">\r\n                        <img className=\"\" src={ posterUrl === \"\" ? null : posterUrl }/>\r\n                    </Col>\r\n                    <Col xs={9} className=\"modal-detail\">\r\n                        <div className=\"modal-titleBox mb-3\">\r\n                            <div id=\"contained-modal-title-vcenter\" className=\"modal-title\">{props.modalData.title.split(/<b>|<\\/b>/g).join(\"\")}</div>\r\n                            <div id=\"contained-modal-title-vcenter\" className=\"modal-sub\">{props.modalData.subtitle.split(/<b>|<\\/b>/g).join(\"\")} / {props.modalData.pubDate}</div>\r\n                        </div>\r\n                        <div className='mt-2 mb-2'><span>런타임 : </span></div>\r\n                        <div className='mt-2 mb-2'><span>국가 / 장르 : </span></div>\r\n                        <div className='mt-2 mb-2'><span>감독 : </span>{props.modalData.director.split(\"|\").slice(0, -1).join(', ')}</div>\r\n                        <div className='mt-2 mb-2'><span>배우 : </span>{props.modalData.actor.split(\"|\").slice(0, -1).join(', ')}</div>\r\n                        <div className='mt-2 mb-2'><span>평점 : </span>⭐ {props.modalData.userRating}</div>\r\n                        <div className='mt-2 mb-2'><span>관객 수 : </span></div>\r\n                        <div className='mt-2 mb-2'><span>사이트 : </span><a target=\"_blank\" href={props.modalData.link }>바로가기</a></div>\r\n                    </Col>\r\n                    <hr className=\"mt-3 mb-3\"/>\r\n                    <Col xs={12} className=\"modal-analy\">\r\n                        <p>여기에 뭐 넣지</p>\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nfunction Movie(props) {\r\n\r\n\r\n    return (\r\n        <Card  className=\"searchResult_movie\" onClick={() => {\r\n            props.setModalData(props.source);\r\n            props.setModalState(true);\r\n        }} >\r\n            <div className=\"searchResult_img\" >\r\n                <Card.Img variant=\"top\" src={ props.source.image === \"\" ? no : props.source.image } />\r\n            </div>\r\n            <Card.Body className=\"searchReuslt_content\">\r\n                <Card.Title className=\"searchResult_title\">{props.source.title.split(/<b>|<\\/b>/g).join(\"\")}</Card.Title>\r\n                <Card.Title className=\"searchResult_subtitle\">{props.source.subtitle.split(/<b>|<\\/b>/g).join(\"\")}</Card.Title>\r\n                \r\n                <Card.Text className=\"searchResult_info mt-4\">{props.source.director.split(\"|\").length > 2 ? props.source.director.split(\"|\")[0] + ' 외 ' + (props.source.director.split(\"|\").length - 2) + '명' : props.source.director.split(\"|\").slice(0, -1).join()} / {props.source.pubDate}</Card.Text>\r\n                <Card.Text className=\"searchResult_info\">평점⭐ {props.source.userRating}</Card.Text>\r\n            </Card.Body>\r\n                \r\n            <div className='cover'></div>\r\n        </Card>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Search;","C:\\Users\\psu84\\movidic\\movie_react\\src\\history.js",["49","50","51","52","53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":22,"column":7,"nodeType":"65","endLine":22,"endColumn":89},{"ruleId":"59","severity":1,"message":"66","line":13,"column":13,"nodeType":"61","messageId":"62","endLine":13,"endColumn":24},{"ruleId":"63","severity":1,"message":"64","line":137,"column":24,"nodeType":"65","endLine":137,"endColumn":43},{"ruleId":"63","severity":1,"message":"64","line":140,"column":24,"nodeType":"65","endLine":140,"endColumn":41},{"ruleId":"59","severity":1,"message":"67","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":9},{"ruleId":"59","severity":1,"message":"68","line":15,"column":17,"nodeType":"61","messageId":"62","endLine":15,"endColumn":29},{"ruleId":"59","severity":1,"message":"69","line":26,"column":10,"nodeType":"61","messageId":"62","endLine":26,"endColumn":23},{"ruleId":"59","severity":1,"message":"70","line":26,"column":25,"nodeType":"61","messageId":"62","endLine":26,"endColumn":41},{"ruleId":"59","severity":1,"message":"71","line":27,"column":10,"nodeType":"61","messageId":"62","endLine":27,"endColumn":24},{"ruleId":"59","severity":1,"message":"72","line":27,"column":26,"nodeType":"61","messageId":"62","endLine":27,"endColumn":43},{"ruleId":"59","severity":1,"message":"73","line":32,"column":10,"nodeType":"61","messageId":"62","endLine":32,"endColumn":15},{"ruleId":"59","severity":1,"message":"74","line":32,"column":17,"nodeType":"61","messageId":"62","endLine":32,"endColumn":25},{"ruleId":"59","severity":1,"message":"75","line":203,"column":24,"nodeType":"61","messageId":"62","endLine":203,"endColumn":43},{"ruleId":"76","severity":1,"message":"77","line":221,"column":8,"nodeType":"78","endLine":221,"endColumn":14,"suggestions":"79"},{"ruleId":"63","severity":1,"message":"64","line":288,"column":25,"nodeType":"65","endLine":288,"endColumn":88},{"ruleId":"80","severity":1,"message":"81","line":301,"column":71,"nodeType":"65","messageId":"82","endLine":301,"endColumn":119,"fix":"83"},{"ruleId":"59","severity":1,"message":"84","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":16},{"ruleId":"59","severity":1,"message":"85","line":6,"column":10,"nodeType":"61","messageId":"62","endLine":6,"endColumn":25},{"ruleId":"59","severity":1,"message":"86","line":82,"column":10,"nodeType":"61","messageId":"62","endLine":82,"endColumn":18},{"ruleId":"76","severity":1,"message":"87","line":115,"column":8,"nodeType":"78","endLine":115,"endColumn":10,"suggestions":"88"},{"ruleId":"59","severity":1,"message":"89","line":164,"column":10,"nodeType":"61","messageId":"62","endLine":164,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":198,"column":45,"nodeType":"65","endLine":198,"endColumn":65},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'page_change' is assigned a value but never used.","'$' is defined but never used.","'genre_change' is assigned a value but never used.","'date_selected' is assigned a value but never used.","'setDate_selected' is assigned a value but never used.","'genre_selected' is assigned a value but never used.","'setGenre_selected' is assigned a value but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","'searchResult_change' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchResult.length'. Either include it or remove the dependency array.","ArrayExpression",["92"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"93","text":"94"},"'ReactDOM' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'Calendar' is defined but never used.","React Hook useEffect has a missing dependency: 'props.movie.movieCd'. Either include it or remove the dependency array.",["95"],"'Moviehistory' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},[13901,13901]," rel=\"noreferrer\"",{"desc":"98","fix":"99"},"Update the dependencies array to be: [page, searchResult.length]",{"range":"100","text":"101"},"Update the dependencies array to be: [props.movie.movieCd]",{"range":"102","text":"103"},[10353,10359],"[page, searchResult.length]",[3613,3615],"[props.movie.movieCd]"]